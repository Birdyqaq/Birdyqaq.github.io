<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue生命周期原理研究</title>
    <link href="/2022/04/03/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/"/>
    <url>/2022/04/03/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<p>我们都知道vue 一共有八个生命周期分别为 beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed 一进入组件的话会执行前四个 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/03/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/04/03/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue模板解析简易实现</title>
    <link href="/2022/03/29/vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/03/29/vue%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>  日常工作中 总是在使用vue进行开发。今天开始就研究一下 如何自己实现一个简易的vue<br>  首先创建一个myVue.js文件,在文件中创建一个class类</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myVue</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后新建一个html文件 引入我们创建的myVue.js 然后实例化我们的myVue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./myVue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">new</span> <span class="hljs-title function_">myVue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>new我们的myVue传入了一个对象 我们在constructor写一个形参,接收到这个对象之后 我们用document.querySelector(option.el) 获取这个节点<br>此时的myVue.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myVue</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">option</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(option.<span class="hljs-property">el</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="模板解析赋值"><a href="#模板解析赋值" class="headerlink" title="模板解析赋值"></a>模板解析赋值</h1><p> 在上面一步 我们已经拿到了app这个节点, 接下来就是考虑怎么把 data的数据 赋值到节点的插值语法中</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xquery">模板内容<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xquery">&#123;<span class="hljs-built_in">&#123;name</span>&#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xquery">&#123;&#123;age&#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./myVue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">new</span> <span class="hljs-title function_">myVue</span>(</span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">            el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-xquery">            data:&#123;</span><br><span class="language-xquery">               <span class="hljs-built_in"> name</span>:<span class="hljs-string">&#x27;吴亦凡&#x27;</span>,</span><br><span class="language-xquery">                age:<span class="hljs-string">&#x27;30&#x27;</span></span><br><span class="language-xquery">            &#125;</span><span class="language-xml"></span><br><span class="language-xml">        &#125;)</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>myVue内容<br>class myVue&#123;<br>    constructor(<span class="hljs-keyword">option</span>)&#123;<br>      this.<span class="hljs-variable">$el</span> =<span class="hljs-built_in"> document</span>.querySelector(<span class="hljs-keyword">option</span>.el)<br>      this.<span class="hljs-variable">$data</span> = <span class="hljs-keyword">option</span>.data<br>      this.complie(this.<span class="hljs-variable">$el</span>)<br><br>    &#125;<br>    complie( <span class="hljs-type">node</span> )&#123;<br>        <span class="hljs-type">node</span>.childNodes.forEach((<span class="hljs-type">item</span>,index)=&gt;&#123;<br>            // 本文节点<br>            <span class="hljs-keyword">if</span>(<span class="hljs-type">item</span>.nodeType == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-keyword">let</span> reg = /\&#123;\&#123;(.*?)\&#125;\&#125;/g;<br>                <span class="hljs-keyword">let</span> <span class="hljs-type">text</span> = <span class="hljs-type">item</span>.textContent;<br><br>                <span class="hljs-type">item</span>.textContent = <span class="hljs-type">text</span><span class="hljs-built_in">.replace</span>(reg,(match,vmKey)=&gt;&#123;<br>                    vmKey = vmKey.trim()<br>                    <span class="hljs-keyword">return</span> this.<span class="hljs-variable">$data</span>[vmKey]<br>                &#125;)<br>            &#125;<br>            // 元素节点<br>            <span class="hljs-keyword">if</span>(<span class="hljs-type">item</span>.nodeType==<span class="hljs-number">1</span>)&#123;<br>                this.complie(<span class="hljs-type">item</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别对元素节点 和 文本节点解析处理</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>详解js任务队列</title>
    <link href="/2022/03/23/%E8%AF%A6%E8%A7%A3js%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    <url>/2022/03/23/%E8%AF%A6%E8%A7%A3js%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs">  JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript 不能有多个线程呢 ？这样能提高效率啊。JavaScript 的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。消息队列：消息队列是一个先进先出的队列，它里面存放着各种消息。事件循环：事件循环是指主线程重复从消息队列中取消息、执行的过程。实际上，主线程只会做一件事情，就是从消息队列里面取消息、执行消息，再取消息、再执行。当消息队列为空时，就会等待直到消息队列变成非空。而且主线程只有在将当前的消息执行完成后，才会去取下一个消息。这种机制就叫做事件循环机制，取一个消息并执行的过程叫做一次循环。</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖</title>
    <link href="/2021/06/23/%E9%98%B2%E6%8A%96/"/>
    <url>/2021/06/23/%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs actionscript"> &lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br> &lt;script&gt;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  防抖:debounce</span><br><span class="hljs-comment">  定义:事件连续触发时,在一定时间内没有再触发事件了,</span><br><span class="hljs-comment">       这时才执行一次事件处理函数(只执行最好一次)</span><br><span class="hljs-comment">*/</span><br> <br> <span class="hljs-keyword">const</span> el = document.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>)<br><br> el.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>,debounce(<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>       console.log(<span class="hljs-keyword">this</span>.value);<br> &#125;,<span class="hljs-number">1000</span>) )<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span><span class="hljs-params">(func,duration=500)</span>&#123;<br>     let timer = <span class="hljs-literal">null</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span>&#123;<br>       timer &amp;&amp; clearTimeout(timer)<br>       timer = setTimeout(()=&gt;&#123;<br>          func.call(<span class="hljs-keyword">this</span>,...args)<br>       &#125;,duration)<br>     &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>节流</title>
    <link href="/2021/06/23/%E8%8A%82%E6%B5%81/"/>
    <url>/2021/06/23/%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs actionscript"> <br> &lt;script&gt;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  节流:throttle</span><br><span class="hljs-comment">  定义:当事件持续触发时，保证在一定时间段内，只调用一次事件处理函数</span><br><span class="hljs-comment">  场景: resize scroll等事件</span><br><span class="hljs-comment">*/</span><br><br> window.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>,throttle(<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>       console.log(<span class="hljs-string">&#x27;scroll&#x27;</span>);<br> &#125;,<span class="hljs-number">1000</span>) )<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span><span class="hljs-params">(func,duration=500)</span>&#123;<br>     let prev = <span class="hljs-number">0</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> Date() - prev &lt; duration) <span class="hljs-keyword">return</span><br>       <span class="hljs-keyword">typeof</span> func === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; func.call(<span class="hljs-keyword">this</span>,...args)<br>       prev = <span class="hljs-keyword">new</span> Date()<br>     &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
